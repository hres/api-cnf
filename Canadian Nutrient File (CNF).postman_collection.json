{
	"info": {
		"_postman_id": "5a5ad1a3-c430-413d-84d3-28d1f81135e7",
		"name": "Canadian Nutrient File (CNF)",
		"description": "The Canadian Nutrient File (CNF) is the standard reference food composition database reporting the amount of nutrients in foods commonly consumed in Canada.\n\nContact Support:\n Email: open-ouvert@tbs-sct.gc.ca",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/food",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bbeb274e-f2d3-424b-9f54-d05d123c88b1",
						"exec": [
							"pm.globals.set(\"language\",\"en\");\r",
							"pm.globals.set(\"type\",\"json\");\r",
							"pm.variables.set(\"path\",\"food\");\r",
							"pm.variables.set(\"id\",50);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "90d15891-3ebd-42f8-84ef-c2301a64c7d4",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var Ajv = require('ajv'),\r",
							"    ajv = new Ajv({logger: console}),\r",
							"    schema = {\r",
							"    \"items\": {\r",
							"        \"required\": [\r",
							"            \"food_code\",\r",
							"            \"food_description\"\r",
							"        ],\r",
							"        \"properties\": {\r",
							"            \"food_code\": {\r",
							"                \"$id\": \"#/items/properties/food_code\",\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"food_description\": {\r",
							"                \"$id\": \"#/items/properties/food_description\",\r",
							"                \"type\": \"string\"\r",
							"            }\r",
							"        },\r",
							"        \"$id\": \"#/items\",\r",
							"        \"type\": \"object\"\r",
							"    },\r",
							"    \"$id\": \"http://example.org/root.json#\",\r",
							"    \"type\": \"array\",\r",
							"    \"definitions\": {},\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\r",
							"    };\r",
							" \r",
							"pm.test('Schema is valid', function() {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(ajv.validate(schema, data)).to.be.true;\r",
							"});\r",
							"\r",
							"//Testing response header is the type provided in the request parameter\r",
							"pm.test(\"Content-Type header\", () => {\r",
							"  if(pm.globals.get(\"type\") === \"json\"){\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"  }\r",
							"  if(pm.globals.get(\"type\") === \"xml\"){  \r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/xml');\r",
							"  }  \r",
							"});\r",
							"\r",
							"\r",
							"  \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{API Key}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "user-key",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"description": "(Required) The identifier assigned to your account for accessing the API",
						"key": "user-key",
						"value": "<string>"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/{{path}}?lang={{language}}&type={{type}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{path}}"
					],
					"query": [
						{
							"key": "lang",
							"value": "{{language}}",
							"description": "Define which language you would like the response to be in"
						},
						{
							"key": "type",
							"value": "{{type}}",
							"description": "Define which media type you would like the response to be in"
						}
					]
				},
				"description": "Returns all foods."
			},
			"response": [
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/food?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"food"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/food?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"food"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Returns a list of all foods, or if an ID is provided, the list of all foods that correspond to the given food code.",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/food?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"food"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n {\n  \"food_code\": \"labore eiusmod sunt nos\",\n  \"food_description\": \"voluptate culpa\"\n },\n {\n  \"food_code\": \"consectetur in\",\n  \"food_description\": \"sint dolore exercitation culpa est\"\n }\n]"
				}
			]
		},
		{
			"name": "/food by id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3d25fb65-6cf0-4251-a77b-9da83ff6e132",
						"exec": [
							"pm.globals.set(\"language\",\"en\");\r",
							"pm.globals.set(\"type\",\"json\");\r",
							"pm.variables.set(\"path\",\"food\");\r",
							"pm.variables.set(\"id\",571);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "15734589-4852-4bbb-8e00-a2bbcf848a8a",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var Ajv = require('ajv'),\r",
							"    ajv = new Ajv({logger: console}),\r",
							"    schema = {\r",
							"    \"items\": {\r",
							"        \"required\": [\r",
							"            \"food_code\",\r",
							"            \"food_description\"\r",
							"        ],\r",
							"        \"properties\": {\r",
							"            \"food_code\": {\r",
							"                \"$id\": \"#/items/properties/food_code\",\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"food_description\": {\r",
							"                \"$id\": \"#/items/properties/food_description\",\r",
							"                \"type\": \"string\"\r",
							"            }\r",
							"        },\r",
							"        \"$id\": \"#/items\",\r",
							"        \"type\": \"object\"\r",
							"    },\r",
							"    \"$id\": \"http://example.org/root.json#\",\r",
							"    \"type\": \"array\",\r",
							"    \"definitions\": {},\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\r",
							"    };\r",
							" \r",
							"pm.test('Schema is valid', function() {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(ajv.validate(schema, data)).to.be.true;\r",
							"});\r",
							"\r",
							"//Testing response header is the type provided in the request parameter\r",
							"pm.test(\"Content-Type header\", () => {\r",
							"  if(pm.globals.get(\"type\") === \"json\"){\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"  }\r",
							"  if(pm.globals.get(\"type\") === \"xml\"){  \r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/xml');\r",
							"  }  \r",
							"});\r",
							"\r",
							"//verify the response values match the device identifier provided in the request parameter\r",
							"pm.test(\"verify json values\", function () {   \r",
							"  var jsonData = pm.response.json();  \r",
							"  \r",
							"   for (var i = 0; i < jsonData.length; i++) \r",
							"    {\r",
							"        var counter = jsonData[i];\r",
							"        var food_code = counter.food_code;\r",
							"        pm.expect(food_code).to.be.eql(pm.variables.get(\"id\"));\r",
							"    } \r",
							"   \r",
							"});\r",
							"  \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{API Key}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "user-key",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"description": "(Required) The identifier assigned to your account for accessing the API",
						"key": "user-key",
						"value": "<string>"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/{{path}}?lang={{language}}&type={{type}}&id={{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{path}}"
					],
					"query": [
						{
							"key": "lang",
							"value": "{{language}}",
							"description": "Define which language you would like the response to be in"
						},
						{
							"key": "type",
							"value": "{{type}}",
							"description": "Define which media type you would like the response to be in"
						},
						{
							"key": "id",
							"value": "{{id}}"
						}
					]
				},
				"description": "Returns all foods."
			},
			"response": [
				{
					"name": "Returns a list of all foods, or if an ID is provided, the list of all foods that correspond to the given food code.",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/food?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"food"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n {\n  \"food_code\": \"labore eiusmod sunt nos\",\n  \"food_description\": \"voluptate culpa\"\n },\n {\n  \"food_code\": \"consectetur in\",\n  \"food_description\": \"sint dolore exercitation culpa est\"\n }\n]"
				},
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/food?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"food"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/food?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"food"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "/nutrientamount all",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6e8daa2f-f6c1-4ff5-b45d-a6afc6003f0d",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var Ajv = require('ajv'),\r",
							"    ajv = new Ajv({logger: console}),\r",
							"    schema = {\r",
							"\"items\": {\r",
							"        \"required\": [\r",
							"            \"food_code\",\r",
							"            \"nutrient_value\",\r",
							"            \"standard_error\",\r",
							"            \"number_observation\",\r",
							"            \"nutrient_name_id\",\r",
							"            \"nutrient_web_name\",\r",
							"            \"nutrient_source_id\"\r",
							"        ],\r",
							"        \"properties\": {\r",
							"            \"food_code\": {\r",
							"                \"$id\": \"#/items/properties/food_code\",\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"nutrient_value\": {\r",
							"                \"$id\": \"#/items/properties/nutrient_value\",\r",
							"                \"type\": \"number\"\r",
							"            },\r",
							"            \"standard_error\": {\r",
							"                \"$id\": \"#/items/properties/standard_error\",\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"number_observation\": {\r",
							"                \"$id\": \"#/items/properties/number_observation\",\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"nutrient_name_id\": {\r",
							"                \"$id\": \"#/items/properties/nutrient_name_id\",\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"nutrient_web_name\": {\r",
							"                \"$id\": \"#/items/properties/nutrient_web_name\",\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"nutrient_source_id\": {\r",
							"                \"$id\": \"#/items/properties/nutrient_source_id\",\r",
							"                \"type\": \"integer\"\r",
							"            }\r",
							"        },\r",
							"        \"$id\": \"#/items\",\r",
							"        \"type\": \"object\"\r",
							"    },\r",
							"    \"$id\": \"http://example.org/root.json#\",\r",
							"    \"type\": \"array\",\r",
							"    \"definitions\": {},\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\r",
							"    };\r",
							" \r",
							"pm.test('Schema is valid', function() {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(ajv.validate(schema, data)).to.be.true;\r",
							"});\r",
							"\r",
							"//Testing response header is the type provided in the request parameter\r",
							"pm.test(\"Content-Type header\", () => {\r",
							"  if(pm.globals.get(\"type\") === \"json\"){\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"  }\r",
							"  if(pm.globals.get(\"type\") === \"xml\"){  \r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/xml');\r",
							"  }  \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "00df681f-d37f-4be5-a847-159e8ab6182d",
						"exec": [
							"pm.globals.set(\"language\",\"en\");\r",
							"pm.globals.set(\"type\",\"json\");\r",
							"pm.variables.set(\"path\",\"nutrientamount\");\r",
							"//pm.variables.set(\"id\",571);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{API Key}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "user-key",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"description": "(Required) The identifier assigned to your account for accessing the API",
						"key": "user-key",
						"value": "<string>"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/{{path}}?lang={{language}}&type={{type}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{path}}"
					],
					"query": [
						{
							"key": "lang",
							"value": "{{language}}",
							"description": "Define which language you would like the response to be in"
						},
						{
							"key": "type",
							"value": "{{type}}",
							"description": "Define which media type you would like the response to be in"
						}
					]
				},
				"description": "Returns all nutrient amounts."
			},
			"response": [
				{
					"name": "Returns a list of all nutrient amounts, or if an ID is provided, the list of all nutrient amounts that correspond to the given food code",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/nutrientamount?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nutrientamount"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n {\n  \"food_code\": \"tempor sed ea incididunt\",\n  \"nutrient_value\": \"dolore ad\",\n  \"standard_error\": \"elit voluptate cillum dolore\",\n  \"number_observation\": \"incididunt irure reprehenderit\",\n  \"nutrient_name_id\": \"anim ad\",\n  \"nutrient_web_name\": \"occaecat Excepteur sunt\",\n  \"nutrient_source_id\": \"ullam\"\n },\n {\n  \"food_code\": \"consequat\",\n  \"nutrient_value\": \"veniam\",\n  \"standard_error\": \"cupidatat\",\n  \"number_observation\": \"sunt deserunt\",\n  \"nutrient_name_id\": \"nostrud anim elit laborum\",\n  \"nutrient_web_name\": \"Ut do adipisicing\",\n  \"nutrient_source_id\": \"ipsum nisi\"\n }\n]"
				},
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/nutrientamount?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nutrientamount"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/nutrientamount?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nutrientamount"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "/nutrientamount by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0192a14f-c28a-4125-96ad-a56d2089b5e7",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var Ajv = require('ajv'),\r",
							"    ajv = new Ajv({logger: console}),\r",
							"    schema = {\r",
							"   \"items\": {\r",
							"        \"required\": [\r",
							"            \"food_code\",\r",
							"            \"nutrient_value\",\r",
							"            \"standard_error\",\r",
							"            \"number_observation\",\r",
							"            \"nutrient_name_id\",\r",
							"            \"nutrient_web_name\",\r",
							"            \"nutrient_source_id\"\r",
							"        ],\r",
							"        \"properties\": {\r",
							"            \"food_code\": {\r",
							"                \"$id\": \"#/items/properties/food_code\",\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"nutrient_value\": {\r",
							"                \"$id\": \"#/items/properties/nutrient_value\",\r",
							"                \"type\": \"number\"\r",
							"            },\r",
							"            \"standard_error\": {\r",
							"                \"$id\": \"#/items/properties/standard_error\",\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"number_observation\": {\r",
							"                \"$id\": \"#/items/properties/number_observation\",\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"nutrient_name_id\": {\r",
							"                \"$id\": \"#/items/properties/nutrient_name_id\",\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"nutrient_web_name\": {\r",
							"                \"$id\": \"#/items/properties/nutrient_web_name\",\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"nutrient_source_id\": {\r",
							"                \"$id\": \"#/items/properties/nutrient_source_id\",\r",
							"                \"type\": \"integer\"\r",
							"            }\r",
							"        },\r",
							"        \"$id\": \"#/items\",\r",
							"        \"type\": \"object\"\r",
							"    },\r",
							"    \"$id\": \"http://example.org/root.json#\",\r",
							"    \"type\": \"array\",\r",
							"    \"definitions\": {},\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\r",
							"    };\r",
							" \r",
							"pm.test('Schema is valid', function() {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(ajv.validate(schema, data)).to.be.true;\r",
							"});\r",
							"\r",
							"//Testing response header is the type provided in the request parameter\r",
							"pm.test(\"Content-Type header\", () => {\r",
							"  if(pm.globals.get(\"type\") === \"json\"){\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"  }\r",
							"  if(pm.globals.get(\"type\") === \"xml\"){  \r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/xml');\r",
							"  }  \r",
							"});\r",
							"\r",
							"//verify the response values match the device identifier provided in the request parameter\r",
							"pm.test(\"verify json values\", function () {   \r",
							"  var jsonData = pm.response.json();  \r",
							"  \r",
							"   for (var i = 0; i < jsonData.length; i++) \r",
							"    {\r",
							"        var counter = jsonData[i];\r",
							"        var food_code = counter.food_code;\r",
							"        pm.expect(food_code).to.be.eql(pm.variables.get(\"id\"));\r",
							"    } \r",
							"   \r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "10947f2d-24e9-4338-8a4c-22337b9be308",
						"exec": [
							"pm.globals.set(\"language\",\"en\");\r",
							"pm.globals.set(\"type\",\"json\");\r",
							"pm.variables.set(\"path\",\"nutrientamount\");\r",
							"pm.variables.set(\"id\",571);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{API Key}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "user-key",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"description": "(Required) The identifier assigned to your account for accessing the API",
						"key": "user-key",
						"value": "<string>"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/{{path}}?lang={{language}}&type={{type}}&id={{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{path}}"
					],
					"query": [
						{
							"key": "lang",
							"value": "{{language}}",
							"description": "Define which language you would like the response to be in"
						},
						{
							"key": "type",
							"value": "{{type}}",
							"description": "Define which media type you would like the response to be in"
						},
						{
							"key": "id",
							"value": "{{id}}",
							"description": "Limit results to those with matching food code"
						}
					]
				},
				"description": "Returns all nutrient amounts."
			},
			"response": [
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/nutrientamount?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nutrientamount"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/nutrientamount?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nutrientamount"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Returns a list of all nutrient amounts, or if an ID is provided, the list of all nutrient amounts that correspond to the given food code",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/nutrientamount?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nutrientamount"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n {\n  \"food_code\": \"tempor sed ea incididunt\",\n  \"nutrient_value\": \"dolore ad\",\n  \"standard_error\": \"elit voluptate cillum dolore\",\n  \"number_observation\": \"incididunt irure reprehenderit\",\n  \"nutrient_name_id\": \"anim ad\",\n  \"nutrient_web_name\": \"occaecat Excepteur sunt\",\n  \"nutrient_source_id\": \"ullam\"\n },\n {\n  \"food_code\": \"consequat\",\n  \"nutrient_value\": \"veniam\",\n  \"standard_error\": \"cupidatat\",\n  \"number_observation\": \"sunt deserunt\",\n  \"nutrient_name_id\": \"nostrud anim elit laborum\",\n  \"nutrient_web_name\": \"Ut do adipisicing\",\n  \"nutrient_source_id\": \"ipsum nisi\"\n }\n]"
				}
			]
		},
		{
			"name": "/nutrientgroup by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7bcd6860-fd67-4665-b99d-ee4848483144",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var Ajv = require('ajv'),\r",
							"    ajv = new Ajv({logger: console}),\r",
							"    schema = {\r",
							"   \"items\": {\r",
							"        \"required\": [\r",
							"            \"nutrient_group_id\",\r",
							"            \"nutrient_group_name\",\r",
							"            \"nutrient_group_order\"\r",
							"        ],\r",
							"        \"properties\": {\r",
							"            \"nutrient_group_id\": {\r",
							"                \"$id\": \"#/items/properties/nutrient_group_id\",\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"nutrient_group_name\": {\r",
							"                \"$id\": \"#/items/properties/nutrient_group_name\",\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"nutrient_group_order\": {\r",
							"                \"$id\": \"#/items/properties/nutrient_group_order\",\r",
							"                \"type\": \"integer\"\r",
							"            }\r",
							"        },\r",
							"        \"$id\": \"#/items\",\r",
							"        \"type\": \"object\"\r",
							"    },\r",
							"    \"$id\": \"http://example.org/root.json#\",\r",
							"    \"type\": \"array\",\r",
							"    \"definitions\": {},\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\r",
							"    };\r",
							" \r",
							"pm.test('Schema is valid', function() {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(ajv.validate(schema, data)).to.be.true;\r",
							"});\r",
							"\r",
							"//Testing response header is the type provided in the request parameter\r",
							"pm.test(\"Content-Type header\", () => {\r",
							"  if(pm.globals.get(\"type\") === \"json\"){\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"  }\r",
							"  if(pm.globals.get(\"type\") === \"xml\"){  \r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/xml');\r",
							"  }  \r",
							"});\r",
							"\r",
							"//verify the response values match the device identifier provided in the request parameter\r",
							"pm.test(\"verify json values\", function () {   \r",
							"  var jsonData = pm.response.json();  \r",
							"  \r",
							"   for (var i = 0; i < jsonData.length; i++) \r",
							"    {\r",
							"        var counter = jsonData[i];\r",
							"        var nutrient_group_id = counter.nutrient_group_id;\r",
							"        pm.expect(nutrient_group_id).to.be.eql(pm.variables.get(\"id\"));\r",
							"    } \r",
							"   \r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "3a343c2e-93a8-4329-9b88-33ab2b81570c",
						"exec": [
							"pm.globals.set(\"language\",\"en\");\r",
							"pm.globals.set(\"type\",\"json\");\r",
							"pm.variables.set(\"path\",\"nutrientgroup\");\r",
							"pm.variables.set(\"id\",1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{API Key}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "user-key",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"description": "(Required) The identifier assigned to your account for accessing the API",
						"key": "user-key",
						"value": "<string>"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/{{path}}?lang={{language}}&type={{type}}&id={{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{path}}"
					],
					"query": [
						{
							"key": "lang",
							"value": "{{language}}",
							"description": "Define which language you would like the response to be in"
						},
						{
							"key": "type",
							"value": "{{type}}",
							"description": "Define which media type you would like the response to be in"
						},
						{
							"key": "id",
							"value": "{{id}}",
							"description": "Limit results to those with matching nutrient group identification number"
						}
					]
				},
				"description": "Returns all nutrient groups."
			},
			"response": [
				{
					"name": "Returns a list of all nutrient groups, or if an ID is provided, the list of all nutrient groups that correspond to the given nutrient group identification number",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/nutrientgroup?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nutrientgroup"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n {\n  \"nutrient_group_id\": \"in consequat sint cupidatat\",\n  \"nutrient_group_name\": \"amet enim\",\n  \"nutrient_group_order\": \"non sed Lorem nostrud\"\n },\n {\n  \"nutrient_group_id\": \"Ut\",\n  \"nutrient_group_name\": \"irure aute labore\",\n  \"nutrient_group_order\": \"voluptate minim reprehenderit ex \"\n }\n]"
				},
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/nutrientgroup?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nutrientgroup"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/nutrientgroup?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nutrientgroup"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "/nutrientgroup all",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "384fc225-af9a-43a5-806b-4d9f9b1a9b42",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var Ajv = require('ajv'),\r",
							"    ajv = new Ajv({logger: console}),\r",
							"    schema = {\r",
							"   \"items\": {\r",
							"        \"required\": [\r",
							"            \"nutrient_group_id\",\r",
							"            \"nutrient_group_name\",\r",
							"            \"nutrient_group_order\"\r",
							"        ],\r",
							"        \"properties\": {\r",
							"            \"nutrient_group_id\": {\r",
							"                \"$id\": \"#/items/properties/nutrient_group_id\",\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"nutrient_group_name\": {\r",
							"                \"$id\": \"#/items/properties/nutrient_group_name\",\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"nutrient_group_order\": {\r",
							"                \"$id\": \"#/items/properties/nutrient_group_order\",\r",
							"                \"type\": \"integer\"\r",
							"            }\r",
							"        },\r",
							"        \"$id\": \"#/items\",\r",
							"        \"type\": \"object\"\r",
							"    },\r",
							"    \"$id\": \"http://example.org/root.json#\",\r",
							"    \"type\": \"array\",\r",
							"    \"definitions\": {},\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\r",
							"    };\r",
							" \r",
							"pm.test('Schema is valid', function() {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(ajv.validate(schema, data)).to.be.true;\r",
							"});\r",
							"\r",
							"//Testing response header is the type provided in the request parameter\r",
							"pm.test(\"Content-Type header\", () => {\r",
							"  if(pm.globals.get(\"type\") === \"json\"){\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"  }\r",
							"  if(pm.globals.get(\"type\") === \"xml\"){  \r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/xml');\r",
							"  }  \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "865e13a3-a192-456f-9564-9c2f65a67c6d",
						"exec": [
							"pm.globals.set(\"language\",\"en\");\r",
							"pm.globals.set(\"type\",\"json\");\r",
							"pm.variables.set(\"path\",\"nutrientgroup\");\r",
							"pm.variables.set(\"id\",1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{API Key}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "user-key",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"description": "(Required) The identifier assigned to your account for accessing the API",
						"key": "user-key",
						"value": "<string>"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/{{path}}?lang={{language}}&type={{type}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{path}}"
					],
					"query": [
						{
							"key": "lang",
							"value": "{{language}}",
							"description": "Define which language you would like the response to be in"
						},
						{
							"key": "type",
							"value": "{{type}}",
							"description": "Define which media type you would like the response to be in"
						}
					]
				},
				"description": "Returns all nutrient groups."
			},
			"response": [
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/nutrientgroup?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nutrientgroup"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/nutrientgroup?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nutrientgroup"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Returns a list of all nutrient groups, or if an ID is provided, the list of all nutrient groups that correspond to the given nutrient group identification number",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/nutrientgroup?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nutrientgroup"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n {\n  \"nutrient_group_id\": \"in consequat sint cupidatat\",\n  \"nutrient_group_name\": \"amet enim\",\n  \"nutrient_group_order\": \"non sed Lorem nostrud\"\n },\n {\n  \"nutrient_group_id\": \"Ut\",\n  \"nutrient_group_name\": \"irure aute labore\",\n  \"nutrient_group_order\": \"voluptate minim reprehenderit ex \"\n }\n]"
				}
			]
		},
		{
			"name": "/nutrientname by id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "29dc513e-d022-4dbb-bee2-6731037b9ed3",
						"exec": [
							"pm.globals.set(\"language\",\"en\");\r",
							"pm.globals.set(\"type\",\"json\");\r",
							"pm.variables.set(\"path\",\"nutrientname\");\r",
							"pm.variables.set(\"id\",830);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d419469a-d1d5-4c19-a699-34c5aca0172a",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var Ajv = require('ajv'),\r",
							"    ajv = new Ajv({logger: console}),\r",
							"    schema = {\r",
							"\"required\": [\r",
							"        \"nutrient_name_id\",\r",
							"        \"nutrient_symbol\",\r",
							"        \"nutrient_name\",\r",
							"        \"unit\",\r",
							"        \"nutrient_code\",\r",
							"        \"tagname\",\r",
							"        \"nutrient_decimals\",\r",
							"        \"nutrient_web_order\",\r",
							"        \"nutrient_web_name\",\r",
							"        \"nutrient_group_id\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"nutrient_name_id\": {\r",
							"            \"$id\": \"#/properties/nutrient_name_id\",\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"nutrient_symbol\": {\r",
							"            \"$id\": \"#/properties/nutrient_symbol\",\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"nutrient_name\": {\r",
							"            \"$id\": \"#/properties/nutrient_name\",\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"unit\": {\r",
							"            \"$id\": \"#/properties/unit\",\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"nutrient_code\": {\r",
							"            \"$id\": \"#/properties/nutrient_code\",\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"tagname\": {\r",
							"            \"$id\": \"#/properties/tagname\",\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"nutrient_decimals\": {\r",
							"            \"$id\": \"#/properties/nutrient_decimals\",\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"nutrient_web_order\": {\r",
							"            \"$id\": \"#/properties/nutrient_web_order\",\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"nutrient_web_name\": {\r",
							"            \"$id\": \"#/properties/nutrient_web_name\",\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"nutrient_group_id\": {\r",
							"            \"$id\": \"#/properties/nutrient_group_id\",\r",
							"            \"type\": \"integer\"\r",
							"        }\r",
							"    },\r",
							"    \"$id\": \"http://example.org/root.json#\",\r",
							"    \"type\": \"object\",\r",
							"    \"definitions\": {},\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\r",
							"    };\r",
							" \r",
							"pm.test('Schema is valid', function() {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(ajv.validate(schema, data)).to.be.true;\r",
							"});\r",
							"\r",
							"//Testing response header is the type provided in the request parameter\r",
							"pm.test(\"Content-Type header\", () => {\r",
							"  if(pm.globals.get(\"type\") === \"json\"){\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"  }\r",
							"  if(pm.globals.get(\"type\") === \"xml\"){  \r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/xml');\r",
							"  }  \r",
							"});\r",
							"\r",
							"//verify the response values match the device identifier provided in the request parameter\r",
							"pm.test(\"verify json values\", function () {   \r",
							"  var jsonData = pm.response.json();  \r",
							"  var nutrient_name_id = jsonData.nutrient_name_id;\r",
							"  pm.expect(nutrient_name_id).to.be.eql(pm.variables.get(\"id\"));\r",
							"    });\r",
							"   \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{API Key}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "user-key",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"description": "(Required) The identifier assigned to your account for accessing the API",
						"key": "user-key",
						"value": "<string>"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/{{path}}?lang={{language}}&type={{type}}&id={{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{path}}"
					],
					"query": [
						{
							"key": "lang",
							"value": "{{language}}"
						},
						{
							"key": "type",
							"value": "{{type}}"
						},
						{
							"key": "id",
							"value": "{{id}}"
						}
					]
				},
				"description": "Returns all nutrient names."
			},
			"response": [
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/nutrientname?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nutrientname"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/nutrientname?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nutrientname"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Returns a list of all nutrient names, or if an ID is provided, the list of all nutrient names that correspond to the given nutrient name identification number",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/nutrientname?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nutrientname"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n {\n  \"nutrient_name_id\": \"eiusmod consectetur adipisicing do\",\n  \"nutrient_code\": \"sit irure in\",\n  \"nutrient_symbol\": \"dolor sunt amet anim\",\n  \"unit\": \"ad non\",\n  \"nutrient_name\": \"aliqua ullamco deserunt eiusmod consequat\",\n  \"tagname\": \"deserunt qui\",\n  \"nutrient_decimals\": \"exercitation voluptate quis deserunt occaecat\",\n  \"nutrient_web_order\": \"proident magna id dolore\",\n  \"nutrient_web_name\": \"nulla laboris adipisicing\",\n  \"nutrient_group_id\": \"enim esse\"\n },\n {\n  \"nutrient_name_id\": \"in sed Excepteur incididunt anim\",\n  \"nutrient_code\": \"anim in veniam\",\n  \"nutrient_symbol\": \"irure velit dolore quis officia\",\n  \"unit\": \"magna aliquip\",\n  \"nutrient_name\": \"ea occaecat\",\n  \"tagname\": \"amet sunt\",\n  \"nutrient_decimals\": \"voluptate Ut quis\",\n  \"nutrient_web_order\": \"qui nostrud\",\n  \"nutrient_web_name\": \"fugiat dolore pariatur\",\n  \"nutrient_group_id\": \"nulla occaecat consectetur et in\"\n }\n]"
				}
			]
		},
		{
			"name": "/nutrientname all",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bccc4dc6-3f9b-4106-a1c8-cce791507833",
						"exec": [
							"pm.globals.set(\"language\",\"en\");\r",
							"pm.globals.set(\"type\",\"json\");\r",
							"pm.variables.set(\"path\",\"nutrientname\");\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "288cbced-1ad8-4f39-acfe-c837408f49ae",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var Ajv = require('ajv'),\r",
							"    ajv = new Ajv({logger: console}),\r",
							"    schema = {\r",
							" \"items\": {\r",
							"        \"required\": [\r",
							"            \"nutrient_name_id\",\r",
							"            \"nutrient_symbol\",\r",
							"            \"nutrient_name\",\r",
							"            \"unit\",\r",
							"            \"nutrient_code\",\r",
							"            \"tagname\",\r",
							"            \"nutrient_decimals\",\r",
							"            \"nutrient_web_order\",\r",
							"            \"nutrient_web_name\",\r",
							"            \"nutrient_group_id\"\r",
							"        ],\r",
							"        \"properties\": {\r",
							"            \"nutrient_name_id\": {\r",
							"                \"$id\": \"#/items/properties/nutrient_name_id\",\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"nutrient_symbol\": {\r",
							"                \"$id\": \"#/items/properties/nutrient_symbol\",\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"nutrient_name\": {\r",
							"                \"$id\": \"#/items/properties/nutrient_name\",\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"unit\": {\r",
							"                \"$id\": \"#/items/properties/unit\",\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"nutrient_code\": {\r",
							"                \"$id\": \"#/items/properties/nutrient_code\",\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"tagname\": {\r",
							"                \"$id\": \"#/items/properties/tagname\",\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"nutrient_decimals\": {\r",
							"                \"$id\": \"#/items/properties/nutrient_decimals\",\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"nutrient_web_order\": {\r",
							"                \"$id\": \"#/items/properties/nutrient_web_order\",\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"nutrient_web_name\": {\r",
							"                \"$id\": \"#/items/properties/nutrient_web_name\",\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"nutrient_group_id\": {\r",
							"                \"$id\": \"#/items/properties/nutrient_group_id\",\r",
							"                \"type\": \"integer\"\r",
							"            }\r",
							"        },\r",
							"        \"$id\": \"#/items\",\r",
							"        \"type\": \"object\"\r",
							"    },\r",
							"    \"$id\": \"http://example.org/root.json#\",\r",
							"    \"type\": \"array\",\r",
							"    \"definitions\": {},\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\r",
							"    };\r",
							" \r",
							"pm.test('Schema is valid', function() {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(ajv.validate(schema, data)).to.be.true;\r",
							"});\r",
							"\r",
							"//Testing response header is the type provided in the request parameter\r",
							"pm.test(\"Content-Type header\", () => {\r",
							"  if(pm.globals.get(\"type\") === \"json\"){\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"  }\r",
							"  if(pm.globals.get(\"type\") === \"xml\"){  \r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/xml');\r",
							"  }  \r",
							"});\r",
							"\r",
							"\r",
							"   \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{API Key}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "user-key",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"description": "(Required) The identifier assigned to your account for accessing the API",
						"key": "user-key",
						"value": "<string>"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/{{path}}?lang={{language}}&type={{type}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{path}}"
					],
					"query": [
						{
							"key": "lang",
							"value": "{{language}}"
						},
						{
							"key": "type",
							"value": "{{type}}"
						}
					]
				},
				"description": "Returns all nutrient names."
			},
			"response": [
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/nutrientname?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nutrientname"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Returns a list of all nutrient names, or if an ID is provided, the list of all nutrient names that correspond to the given nutrient name identification number",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/nutrientname?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nutrientname"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n {\n  \"nutrient_name_id\": \"eiusmod consectetur adipisicing do\",\n  \"nutrient_code\": \"sit irure in\",\n  \"nutrient_symbol\": \"dolor sunt amet anim\",\n  \"unit\": \"ad non\",\n  \"nutrient_name\": \"aliqua ullamco deserunt eiusmod consequat\",\n  \"tagname\": \"deserunt qui\",\n  \"nutrient_decimals\": \"exercitation voluptate quis deserunt occaecat\",\n  \"nutrient_web_order\": \"proident magna id dolore\",\n  \"nutrient_web_name\": \"nulla laboris adipisicing\",\n  \"nutrient_group_id\": \"enim esse\"\n },\n {\n  \"nutrient_name_id\": \"in sed Excepteur incididunt anim\",\n  \"nutrient_code\": \"anim in veniam\",\n  \"nutrient_symbol\": \"irure velit dolore quis officia\",\n  \"unit\": \"magna aliquip\",\n  \"nutrient_name\": \"ea occaecat\",\n  \"tagname\": \"amet sunt\",\n  \"nutrient_decimals\": \"voluptate Ut quis\",\n  \"nutrient_web_order\": \"qui nostrud\",\n  \"nutrient_web_name\": \"fugiat dolore pariatur\",\n  \"nutrient_group_id\": \"nulla occaecat consectetur et in\"\n }\n]"
				},
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/nutrientname?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nutrientname"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "/nutrientsource by id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ca1d307f-21b6-4ef6-a8f3-b36d8d176d41",
						"exec": [
							"pm.globals.set(\"language\",\"en\");\r",
							"pm.globals.set(\"type\",\"json\");\r",
							"pm.variables.set(\"path\",\"nutrientsource\");\r",
							"pm.variables.set(\"id\",108);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1eb0470a-c292-417f-8c3b-c528b4d0847c",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var Ajv = require('ajv'),\r",
							"    ajv = new Ajv({logger: console}),\r",
							"    schema = {\r",
							"\"required\": [\r",
							"        \"nutrient_source_id\",\r",
							"        \"nutrient_source_description\",\r",
							"        \"nutrient_source_code\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"nutrient_source_id\": {\r",
							"            \"$id\": \"#/properties/nutrient_source_id\",\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"nutrient_source_description\": {\r",
							"            \"$id\": \"#/properties/nutrient_source_description\",\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"nutrient_source_code\": {\r",
							"            \"$id\": \"#/properties/nutrient_source_code\",\r",
							"            \"type\": \"integer\"\r",
							"        }\r",
							"    },\r",
							"    \"$id\": \"http://example.org/root.json#\",\r",
							"    \"type\": \"object\",\r",
							"    \"definitions\": {},\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\r",
							"    };\r",
							" \r",
							"pm.test('Schema is valid', function() {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(ajv.validate(schema, data)).to.be.true;\r",
							"});\r",
							"\r",
							"//Testing response header is the type provided in the request parameter\r",
							"pm.test(\"Content-Type header\", () => {\r",
							"  if(pm.globals.get(\"type\") === \"json\"){\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"  }\r",
							"  if(pm.globals.get(\"type\") === \"xml\"){  \r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/xml');\r",
							"  }  \r",
							"});\r",
							"\r",
							"//verify the response values match the device identifier provided in the request parameter\r",
							"pm.test(\"verify json values\", function () {   \r",
							"  var jsonData = pm.response.json();  \r",
							"  var nutrient_source_id = jsonData.nutrient_source_id;\r",
							"  pm.expect(nutrient_source_id).to.be.eql(pm.variables.get(\"id\"));\r",
							"    });\r",
							"   \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{API Key}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "user-key",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"description": "(Required) The identifier assigned to your account for accessing the API",
						"key": "user-key",
						"value": "<string>"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/{{path}}?lang={{language}}&type={{type}}&id={{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{path}}"
					],
					"query": [
						{
							"key": "lang",
							"value": "{{language}}"
						},
						{
							"key": "type",
							"value": "{{type}}"
						},
						{
							"key": "id",
							"value": "{{id}}"
						}
					]
				},
				"description": "Returns all nutrient sources."
			},
			"response": [
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/nutrientsource?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nutrientsource"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/nutrientsource?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nutrientsource"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Returns a list of all nutrient sources, or if an ID is provided, the list of all nutrient sources that correspond to the given nutrient source identification number",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/nutrientsource?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nutrientsource"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n {\n  \"nutrient_source_id\": \"Duis non dolor elit\",\n  \"nutrient_source_description\": \"aute\",\n  \"nutrient_source_code\": \"ipsum dolor reprehenderit\"\n },\n {\n  \"nutrient_source_id\": \"pariatur eu dolor sint s\",\n  \"nutrient_source_description\": \"velit in do\",\n  \"nutrient_source_code\": \"anim ipsum ex\"\n }\n]"
				}
			]
		},
		{
			"name": "/nutrientsource all",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "be1c8404-a22c-4bbf-a962-0c39d0014c46",
						"exec": [
							"pm.globals.set(\"language\",\"en\");\r",
							"pm.globals.set(\"type\",\"json\");\r",
							"pm.variables.set(\"path\",\"nutrientsource\");\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "566eb29c-158c-46b7-ae80-8fc9969d7630",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var Ajv = require('ajv'),\r",
							"    ajv = new Ajv({logger: console}),\r",
							"    schema = {\r",
							"    \"items\": {\r",
							"        \"required\": [\r",
							"            \"nutrient_source_id\",\r",
							"            \"nutrient_source_description\",\r",
							"            \"nutrient_source_code\"\r",
							"        ],\r",
							"        \"properties\": {\r",
							"            \"nutrient_source_id\": {\r",
							"                \"$id\": \"#/items/properties/nutrient_source_id\",\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"nutrient_source_description\": {\r",
							"                \"$id\": \"#/items/properties/nutrient_source_description\",\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"nutrient_source_code\": {\r",
							"                \"$id\": \"#/items/properties/nutrient_source_code\",\r",
							"                \"type\": \"integer\"\r",
							"            }\r",
							"        },\r",
							"        \"$id\": \"#/items\",\r",
							"        \"type\": \"object\"\r",
							"    },\r",
							"    \"$id\": \"http://example.org/root.json#\",\r",
							"    \"type\": \"array\",\r",
							"    \"definitions\": {},\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\r",
							"    };\r",
							" \r",
							"pm.test('Schema is valid', function() {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(ajv.validate(schema, data)).to.be.true;\r",
							"});\r",
							"\r",
							"//Testing response header is the type provided in the request parameter\r",
							"pm.test(\"Content-Type header\", () => {\r",
							"  if(pm.globals.get(\"type\") === \"json\"){\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"  }\r",
							"  if(pm.globals.get(\"type\") === \"xml\"){  \r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/xml');\r",
							"  }  \r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{API Key}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "user-key",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"description": "(Required) The identifier assigned to your account for accessing the API",
						"key": "user-key",
						"value": "<string>"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/{{path}}?lang={{language}}&type={{type}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{path}}"
					],
					"query": [
						{
							"key": "lang",
							"value": "{{language}}"
						},
						{
							"key": "type",
							"value": "{{type}}"
						}
					]
				},
				"description": "Returns all nutrient sources."
			},
			"response": [
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/nutrientsource?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nutrientsource"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/nutrientsource?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nutrientsource"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Returns a list of all nutrient sources, or if an ID is provided, the list of all nutrient sources that correspond to the given nutrient source identification number",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/nutrientsource?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nutrientsource"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n {\n  \"nutrient_source_id\": \"Duis non dolor elit\",\n  \"nutrient_source_description\": \"aute\",\n  \"nutrient_source_code\": \"ipsum dolor reprehenderit\"\n },\n {\n  \"nutrient_source_id\": \"pariatur eu dolor sint s\",\n  \"nutrient_source_description\": \"velit in do\",\n  \"nutrient_source_code\": \"anim ipsum ex\"\n }\n]"
				}
			]
		},
		{
			"name": "/servingsize by id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ea246122-4f8b-453a-9291-187045be40e6",
						"exec": [
							"pm.globals.set(\"language\",\"en\");\r",
							"pm.globals.set(\"type\",\"json\");\r",
							"pm.variables.set(\"path\",\"servingsize\");\r",
							"pm.variables.set(\"id\",55);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6989f724-c0fd-4021-b369-c42d2c038b65",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var Ajv = require('ajv'),\r",
							"    ajv = new Ajv({logger: console}),\r",
							"    schema = {\r",
							"\"items\": {\r",
							"        \"required\": [\r",
							"            \"conversion_factor_value\",\r",
							"            \"food_code\",\r",
							"            \"food_description\",\r",
							"            \"measure_name\"\r",
							"        ],\r",
							"        \"properties\": {\r",
							"            \"conversion_factor_value\": {\r",
							"                \"$id\": \"#/items/properties/conversion_factor_value\",\r",
							"                \"type\": \"number\"\r",
							"            },\r",
							"            \"food_code\": {\r",
							"                \"$id\": \"#/items/properties/food_code\",\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"food_description\": {\r",
							"                \"$id\": \"#/items/properties/food_description\",\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"measure_name\": {\r",
							"                \"$id\": \"#/items/properties/measure_name\",\r",
							"                \"type\": \"string\"\r",
							"            }\r",
							"        },\r",
							"        \"$id\": \"#/items\",\r",
							"        \"type\": \"object\"\r",
							"    },\r",
							"    \"$id\": \"http://example.org/root.json#\",\r",
							"    \"type\": \"array\",\r",
							"    \"definitions\": {},\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\r",
							"    };\r",
							" \r",
							"pm.test('Schema is valid', function() {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(ajv.validate(schema, data)).to.be.true;\r",
							"});\r",
							"\r",
							"//Testing response header is the type provided in the request parameter\r",
							"pm.test(\"Content-Type header\", () => {\r",
							"  if(pm.globals.get(\"type\") === \"json\"){\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"  }\r",
							"  if(pm.globals.get(\"type\") === \"xml\"){  \r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/xml');\r",
							"  }  \r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"verify json values\", function () {   \r",
							"  var jsonData = pm.response.json();  \r",
							"  \r",
							"   for (var i = 0; i < jsonData.length; i++) \r",
							"    {\r",
							"        var counter = jsonData[i];\r",
							"        var food_code = counter.food_code;\r",
							"        pm.expect(food_code).to.be.eql(pm.variables.get(\"id\"));\r",
							"    } \r",
							"   \r",
							"});   \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{API Key}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "user-key",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"description": "(Required) The identifier assigned to your account for accessing the API",
						"key": "user-key",
						"value": "<string>"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/{{path}}?lang={{language}}&type={{type}}&id={{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{path}}"
					],
					"query": [
						{
							"key": "lang",
							"value": "{{language}}"
						},
						{
							"key": "type",
							"value": "{{type}}"
						},
						{
							"key": "id",
							"value": "{{id}}"
						}
					]
				},
				"description": "Returns all measures and conversion factors."
			},
			"response": [
				{
					"name": "Returns a list of all serving sizes, or if an ID is provided, the list of all serving sizes that correspond to the given food code",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/servingsize?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"servingsize"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n {\n  \"food_code\": \"dolore et\",\n  \"food_description\": \"pariatur officia\",\n  \"conversion_factor_value\": \"deserunt id quis cillum anim\",\n  \"measure_name\": \"id ullamco\"\n },\n {\n  \"food_code\": \"laboris reprehenderit ani\",\n  \"food_description\": \"dolore Excepteur proident\",\n  \"conversion_factor_value\": \"sit adipisicing amet in Excepteur\",\n  \"measure_name\": \"ex dolore non nisi qui\"\n }\n]"
				},
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/servingsize?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"servingsize"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/servingsize?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"servingsize"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "/servingsize all",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "299c0669-5a65-45c9-8cc0-10a87adee091",
						"exec": [
							"pm.globals.set(\"language\",\"en\");\r",
							"pm.globals.set(\"type\",\"json\");\r",
							"pm.variables.set(\"path\",\"servingsize\");\r",
							"pm.variables.set(\"id\",55);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ded7cbde-2d97-432a-89a0-bc1ede2ccc36",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var Ajv = require('ajv'),\r",
							"    ajv = new Ajv({logger: console}),\r",
							"    schema = {\r",
							"\"items\": {\r",
							"        \"required\": [\r",
							"            \"conversion_factor_value\",\r",
							"            \"food_code\",\r",
							"            \"food_description\",\r",
							"            \"measure_name\"\r",
							"        ],\r",
							"        \"properties\": {\r",
							"            \"conversion_factor_value\": {\r",
							"                \"$id\": \"#/items/properties/conversion_factor_value\",\r",
							"                \"type\": \"number\"\r",
							"            },\r",
							"            \"food_code\": {\r",
							"                \"$id\": \"#/items/properties/food_code\",\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"food_description\": {\r",
							"                \"$id\": \"#/items/properties/food_description\",\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"measure_name\": {\r",
							"                \"$id\": \"#/items/properties/measure_name\",\r",
							"                \"type\": \"string\"\r",
							"            }\r",
							"        },\r",
							"        \"$id\": \"#/items\",\r",
							"        \"type\": \"object\"\r",
							"    },\r",
							"    \"$id\": \"http://example.org/root.json#\",\r",
							"    \"type\": \"array\",\r",
							"    \"definitions\": {},\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\r",
							"    };\r",
							" \r",
							"pm.test('Schema is valid', function() {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(ajv.validate(schema, data)).to.be.true;\r",
							"});\r",
							"\r",
							"//Testing response header is the type provided in the request parameter\r",
							"pm.test(\"Content-Type header\", () => {\r",
							"  if(pm.globals.get(\"type\") === \"json\"){\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"  }\r",
							"  if(pm.globals.get(\"type\") === \"xml\"){  \r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/xml');\r",
							"  }  \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{API Key}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "user-key",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"description": "(Required) The identifier assigned to your account for accessing the API",
						"key": "user-key",
						"value": "<string>"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/{{path}}?lang={{language}}&type={{type}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{path}}"
					],
					"query": [
						{
							"key": "lang",
							"value": "{{language}}"
						},
						{
							"key": "type",
							"value": "{{type}}"
						}
					]
				},
				"description": "Returns all measures and conversion factors."
			},
			"response": [
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/servingsize?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"servingsize"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Returns a list of all serving sizes, or if an ID is provided, the list of all serving sizes that correspond to the given food code",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/servingsize?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"servingsize"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n {\n  \"food_code\": \"dolore et\",\n  \"food_description\": \"pariatur officia\",\n  \"conversion_factor_value\": \"deserunt id quis cillum anim\",\n  \"measure_name\": \"id ullamco\"\n },\n {\n  \"food_code\": \"laboris reprehenderit ani\",\n  \"food_description\": \"dolore Excepteur proident\",\n  \"conversion_factor_value\": \"sit adipisicing amet in Excepteur\",\n  \"measure_name\": \"ex dolore non nisi qui\"\n }\n]"
				},
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/servingsize?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"servingsize"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "/refuseamount by id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4dfe42cf-29d9-4eb5-b98b-3366ea89c167",
						"exec": [
							"pm.globals.set(\"language\",\"en\");\r",
							"pm.globals.set(\"type\",\"json\");\r",
							"pm.variables.set(\"path\",\"refuseamount\");\r",
							"pm.variables.set(\"id\",55);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "21e9fcfe-351b-4ba9-87a5-397261cea53e",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var Ajv = require('ajv'),\r",
							"    ajv = new Ajv({logger: console}),\r",
							"    schema = {\r",
							" \"items\": {\r",
							"        \"required\": [\r",
							"            \"refuse_amount\",\r",
							"            \"food_code\",\r",
							"            \"food_description\",\r",
							"            \"refuse_name\"\r",
							"        ],\r",
							"        \"properties\": {\r",
							"            \"refuse_amount\": {\r",
							"                \"$id\": \"#/items/properties/refuse_amount\",\r",
							"                \"type\": \"number\"\r",
							"            },\r",
							"            \"food_code\": {\r",
							"                \"$id\": \"#/items/properties/food_code\",\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"food_description\": {\r",
							"                \"$id\": \"#/items/properties/food_description\",\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"refuse_name\": {\r",
							"                \"$id\": \"#/items/properties/refuse_name\",\r",
							"                \"type\": \"string\"\r",
							"            }\r",
							"        },\r",
							"        \"$id\": \"#/items\",\r",
							"        \"type\": \"object\"\r",
							"    },\r",
							"    \"$id\": \"http://example.org/root.json#\",\r",
							"    \"type\": \"array\",\r",
							"    \"definitions\": {},\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\r",
							"    };\r",
							" \r",
							"pm.test('Schema is valid', function() {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(ajv.validate(schema, data)).to.be.true;\r",
							"});\r",
							"\r",
							"//Testing response header is the type provided in the request parameter\r",
							"pm.test(\"Content-Type header\", () => {\r",
							"  if(pm.globals.get(\"type\") === \"json\"){\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"  }\r",
							"  if(pm.globals.get(\"type\") === \"xml\"){  \r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/xml');\r",
							"  }  \r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"verify json values\", function () {   \r",
							"  var jsonData = pm.response.json();  \r",
							"  \r",
							"   for (var i = 0; i < jsonData.length; i++) \r",
							"    {\r",
							"        var counter = jsonData[i];\r",
							"        var food_code = counter.food_code;\r",
							"        pm.expect(food_code).to.be.eql(pm.variables.get(\"id\"));\r",
							"    } \r",
							"   \r",
							"});   \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{API Key}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "user-key",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"description": "(Required) The identifier assigned to your account for accessing the API",
						"key": "user-key",
						"value": "<string>"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/{{path}}?lang={{language}}&type={{type}}&id={{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{path}}"
					],
					"query": [
						{
							"key": "lang",
							"value": "{{language}}"
						},
						{
							"key": "type",
							"value": "{{type}}"
						},
						{
							"key": "id",
							"value": "{{id}}"
						}
					]
				},
				"description": "Returns all refuse amounts."
			},
			"response": [
				{
					"name": "Returns a list of all refuse amounts, or if an ID is provided, the list of all refuse amounts that correspond to the given food code",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/refuseamount?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"refuseamount"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n {\n  \"food_code\": \"\",\n  \"food_description\": \"ipsum\",\n  \"refuse_amount\": \"consequat consectetur ullamc\",\n  \"refuse_name\": \"in enim Lorem irure tempor\"\n },\n {\n  \"food_code\": \"tempor pariatur\",\n  \"food_description\": \"sed ea exercitation\",\n  \"refuse_amount\": \"in est fugiat pariatur\",\n  \"refuse_name\": \"ex quis\"\n }\n]"
				},
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/refuseamount?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"refuseamount"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/refuseamount?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"refuseamount"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "/refuseamount all",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "03d89d92-4cfb-425f-a9aa-67cf4cc8922a",
						"exec": [
							"pm.globals.set(\"language\",\"en\");\r",
							"pm.globals.set(\"type\",\"json\");\r",
							"pm.variables.set(\"path\",\"refuseamount\");\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d2b87a34-6862-41a4-a2ed-c4bcec6c1a26",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var Ajv = require('ajv'),\r",
							"    ajv = new Ajv({logger: console}),\r",
							"    schema = {\r",
							" \"items\": {\r",
							"        \"required\": [\r",
							"            \"refuse_amount\",\r",
							"            \"food_code\",\r",
							"            \"food_description\",\r",
							"            \"refuse_name\"\r",
							"        ],\r",
							"        \"properties\": {\r",
							"            \"refuse_amount\": {\r",
							"                \"$id\": \"#/items/properties/refuse_amount\",\r",
							"                \"type\": \"number\"\r",
							"            },\r",
							"            \"food_code\": {\r",
							"                \"$id\": \"#/items/properties/food_code\",\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"food_description\": {\r",
							"                \"$id\": \"#/items/properties/food_description\",\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"refuse_name\": {\r",
							"                \"$id\": \"#/items/properties/refuse_name\",\r",
							"                \"type\": \"string\"\r",
							"            }\r",
							"        },\r",
							"        \"$id\": \"#/items\",\r",
							"        \"type\": \"object\"\r",
							"    },\r",
							"    \"$id\": \"http://example.org/root.json#\",\r",
							"    \"type\": \"array\",\r",
							"    \"definitions\": {},\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\r",
							"    };\r",
							" \r",
							"pm.test('Schema is valid', function() {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(ajv.validate(schema, data)).to.be.true;\r",
							"});\r",
							"\r",
							"//Testing response header is the type provided in the request parameter\r",
							"pm.test(\"Content-Type header\", () => {\r",
							"  if(pm.globals.get(\"type\") === \"json\"){\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"  }\r",
							"  if(pm.globals.get(\"type\") === \"xml\"){  \r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/xml');\r",
							"  }  \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{API Key}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "user-key",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"description": "(Required) The identifier assigned to your account for accessing the API",
						"key": "user-key",
						"value": "<string>"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/{{path}}?lang={{language}}&type={{type}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{path}}"
					],
					"query": [
						{
							"key": "lang",
							"value": "{{language}}"
						},
						{
							"key": "type",
							"value": "{{type}}"
						}
					]
				},
				"description": "Returns all refuse amounts."
			},
			"response": [
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/refuseamount?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"refuseamount"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/refuseamount?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"refuseamount"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Returns a list of all refuse amounts, or if an ID is provided, the list of all refuse amounts that correspond to the given food code",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/refuseamount?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"refuseamount"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n {\n  \"food_code\": \"\",\n  \"food_description\": \"ipsum\",\n  \"refuse_amount\": \"consequat consectetur ullamc\",\n  \"refuse_name\": \"in enim Lorem irure tempor\"\n },\n {\n  \"food_code\": \"tempor pariatur\",\n  \"food_description\": \"sed ea exercitation\",\n  \"refuse_amount\": \"in est fugiat pariatur\",\n  \"refuse_name\": \"ex quis\"\n }\n]"
				}
			]
		},
		{
			"name": "/yieldamount by id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "20c4a749-442b-4c5c-84ad-fa8db065a11f",
						"exec": [
							"pm.globals.set(\"language\",\"en\");\r",
							"pm.globals.set(\"type\",\"json\");\r",
							"pm.variables.set(\"path\",\"yieldamount\");\r",
							"pm.variables.set(\"id\",57);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "40293e79-05c0-4cda-a2a9-47111509e2ea",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var Ajv = require('ajv'),\r",
							"    ajv = new Ajv({logger: console}),\r",
							"    schema = {\r",
							" \"items\": {\r",
							"        \"required\": [\r",
							"            \"yield_amount\",\r",
							"            \"food_code\",\r",
							"            \"food_description\",\r",
							"            \"yield_name\"\r",
							"        ],\r",
							"        \"properties\": {\r",
							"            \"yield_amount\": {\r",
							"                \"$id\": \"#/items/properties/yield_amount\",\r",
							"                \"type\": \"number\"\r",
							"            },\r",
							"            \"food_code\": {\r",
							"                \"$id\": \"#/items/properties/food_code\",\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"food_description\": {\r",
							"                \"$id\": \"#/items/properties/food_description\",\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"yield_name\": {\r",
							"                \"$id\": \"#/items/properties/yield_name\",\r",
							"                \"type\": \"string\"\r",
							"            }\r",
							"        },\r",
							"        \"$id\": \"#/items\",\r",
							"        \"type\": \"object\"\r",
							"    },\r",
							"    \"$id\": \"http://example.org/root.json#\",\r",
							"    \"type\": \"array\",\r",
							"    \"definitions\": {},\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\r",
							"    };\r",
							" \r",
							"pm.test('Schema is valid', function() {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(ajv.validate(schema, data)).to.be.true;\r",
							"});\r",
							"\r",
							"//Testing response header is the type provided in the request parameter\r",
							"pm.test(\"Content-Type header\", () => {\r",
							"  if(pm.globals.get(\"type\") === \"json\"){\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"  }\r",
							"  if(pm.globals.get(\"type\") === \"xml\"){  \r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/xml');\r",
							"  }  \r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"verify json values\", function () {   \r",
							"  var jsonData = pm.response.json();  \r",
							"  \r",
							"   for (var i = 0; i < jsonData.length; i++) \r",
							"    {\r",
							"        var counter = jsonData[i];\r",
							"        var food_code = counter.food_code;\r",
							"        pm.expect(food_code).to.be.eql(pm.variables.get(\"id\"));\r",
							"    } \r",
							"   \r",
							"});   \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{API Key}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "user-key",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"description": "(Required) The identifier assigned to your account for accessing the API",
						"key": "user-key",
						"value": "<string>"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/{{path}}?lang={{language}}&type={{type}}&id={{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{path}}"
					],
					"query": [
						{
							"key": "lang",
							"value": "{{language}}"
						},
						{
							"key": "type",
							"value": "{{type}}"
						},
						{
							"key": "id",
							"value": "{{id}}"
						}
					]
				},
				"description": "Returns all yield amounts."
			},
			"response": [
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/yieldamount?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"yieldamount"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Returns a list of all yield amounts, or if an ID is provided, the list of all yield amounts that correspond to the given food code",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/yieldamount?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"yieldamount"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n {\n  \"food_code\": \"eiusmod nostrud velit\",\n  \"food_description\": \"culpa\",\n  \"yield_amount\": \"in voluptate dolore reprehenderit quis\",\n  \"yield_name\": \"irure\"\n },\n {\n  \"food_code\": \"ullamco dolor\",\n  \"food_description\": \"dolore minim\",\n  \"yield_amount\": \"consectet\",\n  \"yield_name\": \"dolor Duis anim adipisicing\"\n }\n]"
				},
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/yieldamount?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"yieldamount"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "/yieldamount all",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2eda15d0-0a27-4dc9-8006-6e0ee0ba9464",
						"exec": [
							"pm.globals.set(\"language\",\"en\");\r",
							"pm.globals.set(\"type\",\"json\");\r",
							"pm.variables.set(\"path\",\"yieldamount\");\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "355a8032-c65d-4100-b036-377ab12be378",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var Ajv = require('ajv'),\r",
							"    ajv = new Ajv({logger: console}),\r",
							"    schema = {\r",
							" \"items\": {\r",
							"        \"required\": [\r",
							"            \"yield_amount\",\r",
							"            \"food_code\",\r",
							"            \"food_description\",\r",
							"            \"yield_name\"\r",
							"        ],\r",
							"        \"properties\": {\r",
							"            \"yield_amount\": {\r",
							"                \"$id\": \"#/items/properties/yield_amount\",\r",
							"                \"type\": \"number\"\r",
							"            },\r",
							"            \"food_code\": {\r",
							"                \"$id\": \"#/items/properties/food_code\",\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"food_description\": {\r",
							"                \"$id\": \"#/items/properties/food_description\",\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"yield_name\": {\r",
							"                \"$id\": \"#/items/properties/yield_name\",\r",
							"                \"type\": \"string\"\r",
							"            }\r",
							"        },\r",
							"        \"$id\": \"#/items\",\r",
							"        \"type\": \"object\"\r",
							"    },\r",
							"    \"$id\": \"http://example.org/root.json#\",\r",
							"    \"type\": \"array\",\r",
							"    \"definitions\": {},\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\r",
							"    };\r",
							" \r",
							"pm.test('Schema is valid', function() {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(ajv.validate(schema, data)).to.be.true;\r",
							"});\r",
							"\r",
							"//Testing response header is the type provided in the request parameter\r",
							"pm.test(\"Content-Type header\", () => {\r",
							"  if(pm.globals.get(\"type\") === \"json\"){\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"  }\r",
							"  if(pm.globals.get(\"type\") === \"xml\"){  \r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/xml');\r",
							"  }  \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{API Key}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "user-key",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"description": "(Required) The identifier assigned to your account for accessing the API",
						"key": "user-key",
						"value": "<string>"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/{{path}}?lang={{language}}&type={{type}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{path}}"
					],
					"query": [
						{
							"key": "lang",
							"value": "{{language}}"
						},
						{
							"key": "type",
							"value": "{{type}}"
						}
					]
				},
				"description": "Returns all yield amounts."
			},
			"response": [
				{
					"name": "Returns a list of all yield amounts, or if an ID is provided, the list of all yield amounts that correspond to the given food code",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/yieldamount?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"yieldamount"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n {\n  \"food_code\": \"eiusmod nostrud velit\",\n  \"food_description\": \"culpa\",\n  \"yield_amount\": \"in voluptate dolore reprehenderit quis\",\n  \"yield_name\": \"irure\"\n },\n {\n  \"food_code\": \"ullamco dolor\",\n  \"food_description\": \"dolore minim\",\n  \"yield_amount\": \"consectet\",\n  \"yield_name\": \"dolor Duis anim adipisicing\"\n }\n]"
				},
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/yieldamount?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"yieldamount"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Untitled Example",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The identifier assigned to your account for accessing the API",
								"key": "user-key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/yieldamount?lang=en&type=json&id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"yieldamount"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								},
								{
									"key": "type",
									"value": "json"
								},
								{
									"key": "id",
									"value": "<string>"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		}
	],
	"variable": [
		{
			"id": "baseUrl",
			"key": "baseUrl",
			"value": "https://cnf-hc-sc-apicast-production.api.canada.ca/v1/",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}